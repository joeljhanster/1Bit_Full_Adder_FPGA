/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_2 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [7-1:0] M_seg_seg;
  wire [3-1:0] M_seg_sel;
  reg [9-1:0] M_seg_values;
  multi_seven_seg_3 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [9-1:0] M_dec_ctr_digits;
  reg [1-1:0] M_dec_ctr_inc;
  multi_dec_ctr_4 dec_ctr (
    .clk(clk),
    .rst(rst),
    .inc(M_dec_ctr_inc),
    .digits(M_dec_ctr_digits)
  );
  wire [3-1:0] M_myCount_value;
  slowCount_5 myCount (
    .clk(clk),
    .rst(rst),
    .value(M_myCount_value)
  );
  wire [1-1:0] M_ctr_value;
  counter_6 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  localparam MANUAL_state = 1'd0;
  localparam AUTO_state = 1'd1;
  
  reg M_state_d, M_state_q = MANUAL_state;
  
  always @* begin
    M_state_d = M_state_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_edge_detector_in = M_ctr_value;
    M_dec_ctr_inc = M_edge_detector_out;
    M_seg_values = 9'h000;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    io_led = 24'h000000;
    io_led[0+0+0-:1] = io_dip[0+0+0-:1];
    
    case (M_state_q)
      MANUAL_state: begin
        io_led[16+0+2-:3] = io_dip[16+0+2-:3];
        if (io_dip[0+0+0-:1]) begin
          M_state_d = AUTO_state;
        end
        if (!io_dip[16+2+0-:1] & !io_dip[16+1+0-:1] & !io_dip[16+0+0-:1]) begin
          M_seg_values = 9'h000;
        end
        if (!io_dip[16+2+0-:1] & !io_dip[16+1+0-:1] & io_dip[16+0+0-:1]) begin
          M_seg_values = 9'h001;
        end
        if (!io_dip[16+2+0-:1] & io_dip[16+1+0-:1] & !io_dip[16+0+0-:1]) begin
          M_seg_values = 9'h008;
        end
        if (!io_dip[16+2+0-:1] & io_dip[16+1+0-:1] & io_dip[16+0+0-:1]) begin
          M_seg_values = 9'h009;
        end
        if (io_dip[16+2+0-:1] & !io_dip[16+1+0-:1] & !io_dip[16+0+0-:1]) begin
          M_seg_values = 9'h040;
        end
        if (io_dip[16+2+0-:1] & !io_dip[16+1+0-:1] & io_dip[16+0+0-:1]) begin
          M_seg_values = 9'h041;
        end
        if (io_dip[16+2+0-:1] & io_dip[16+1+0-:1] & !io_dip[16+0+0-:1]) begin
          M_seg_values = 9'h048;
        end
        if (io_dip[16+2+0-:1] & io_dip[16+1+0-:1] & io_dip[16+0+0-:1]) begin
          M_seg_values = 9'h049;
        end
      end
      AUTO_state: begin
        io_led[16+0+2-:3] = M_myCount_value;
        M_seg_values = M_dec_ctr_digits;
        if (!io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
