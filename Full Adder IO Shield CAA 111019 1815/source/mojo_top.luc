module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
        
    output io_led [3][8],   // LEDs on IO Shield, 3 outputs connected to pins 15,16,17 from FPGA (inputs Cin, A, B into Full Adder)
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield up-0,centre-1, bottom-2, left-3, right-4
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    edge_detector edge_detector (#RISE(1), #FALL(0));
    
    .rst(rst) {
      multi_seven_seg seg;                // adding seven segment module
      multi_dec_ctr dec_ctr;              // adding decimal counter module
      slowCount myCount;                  // adding slow counter module
      counter ctr (#SIZE(1), #DIV(24));   // adding counter module
      fsm state = {MANUAL, AUTO};         // defining finite state machines (FSMs)
    }
  }
  
  always {
    // Default file unchanged.
    reset_cond.in = ~rst_n;               // input raw inverted reset signal
    rst = reset_cond.out;                 // conditioned reset
    led = 8h00;                           // turn LEDs off
    spi_miso = bz;                        // not using SPI
    spi_channel = bzzzz;                  // not using flags
    avr_rx = bz;                          // not using serial port
    
    edge_detector.in = ctr.value;
    dec_ctr.inc = edge_detector.out;
    
    seg.values = {3h0, 3h0, 3h0};         // the segments will display "000" by default
    
    io_seg = ~seg.seg;                    // connect segments to the driver
    io_sel = ~seg.sel;                    // connect digit select to the driver
    io_led = 3x{{8h00}};                  // turn LEDs off

    io_led[0][0] = io_dip[0][0];          // connects switch 0 to LED 0 to change states between MANUAL and AUTO

    case (state.q) {
      state.MANUAL:
        io_led[2][2:0] = io_dip[2][2:0];  // connects switches 16-18 to LEDs 
        
        // switch is turned ON to enable automatic testing
        if (io_dip[0][0]) { 
          state.d = state.AUTO;
        }
        
        // TEST CASE 1: 000
        if (!io_dip[2][2] & !io_dip[2][1] & !io_dip[2][0]) {
          seg.values = {3h0, 3h0, 3h0};
        }
        // TEST CASE 2: 001
        if (!io_dip[2][2] & !io_dip[2][1] & io_dip[2][0]) {
          seg.values = {3h0, 3h0, 3h1};
        }
        // TEST CASE 3: 010
        if (!io_dip[2][2] & io_dip[2][1] & !io_dip[2][0]) {
          seg.values = {3h0, 3h1, 3h0};
        }
        // TEST CASE 4: 011
        if (!io_dip[2][2] & io_dip[2][1] & io_dip[2][0]) {
          seg.values = {3h0, 3h1, 3h1};
        }
        // TEST CASE 5: 100
        if (io_dip[2][2] & !io_dip[2][1] & !io_dip[2][0]) {
          seg.values = {3h1, 3h0, 3h0};
        }
        // TEST CASE 6: 101
        if (io_dip[2][2] & !io_dip[2][1] & io_dip[2][0]) {
          seg.values = {3h1, 3h0, 3h1};
        }
        // TEST CASE 7: 110
        if (io_dip[2][2] & io_dip[2][1] & !io_dip[2][0]) {
          seg.values = {3h1, 3h1, 3h0};
        }
        // TEST CASE 8: 111
        if (io_dip[2][2] & io_dip[2][1] & io_dip[2][0]) {
          seg.values = {3h1, 3h1, 3h1}; 
        }
      
      state.AUTO:
        io_led[2][2:0] = myCount.value;   // connects switches 16-18 to binary counter
        seg.values = dec_ctr.digits;      // seven segment to automatically change
        
        // switch is turned OFF to enable manual testing
        if (!io_dip[0][0]) {
          state.d = state.MANUAL;
        }
    }
  }
}
        